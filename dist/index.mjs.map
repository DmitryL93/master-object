{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import cloneDeep from 'lodash.clonedeep'\n\nexport type Predicate = (string | number)[]\n\nexport default class MasterObject<SourceType extends Object | Array<ArrayItemsType>, ArrayItemsType> {\n  private object: SourceType = {} as SourceType\n\n  /**\n   * Creates an empty object if the passed value is not an object or an array.\n   * If an object or array is passed, a deep clone of it is created\n   */\n  public constructor(object?: SourceType) {\n    if (!(this.isObject(object) || Array.isArray(object)) || this.isDate(object) || object === undefined) {\n      return\n    }\n\n    this.object = cloneDeep(object)\n  }\n\n  /**\n   * Get full object or value by passed predicate.\n   * @param predicate type Predicate = (string | number)[], array of string keys or number indexes\n   * @returns Generic ChangedType | ValueType or undefined if value not exist\n   */\n  public get<ChangedType extends SourceType, ValueType>(predicate?: Predicate): ChangedType | ValueType | undefined {\n    if (this.isPredicate(predicate)) {\n      return this.getPredicate(predicate) as ValueType | undefined\n    }\n\n    return this.object as ChangedType\n  }\n\n  /**\n   * Sets a deep clone value based on the passed predicate.\n   * If the predicate path does not exist, it will be created/overridden as follows:\n   * string type creates an object, numeric type creates an array.\n   * @param predicate type Predicate = (string | number)[], array of string keys or number indexes\n   * @param value Generic SetterType, any value to bind\n   * @returns this\n   */\n  public set<SetterType>(predicate: Predicate, value: SetterType): MasterObject<SourceType, ArrayItemsType> {\n    if (this.isPredicate(predicate)) {\n      return this.setPredicate(predicate, value)\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a value based on the passed predicate.\n   * @param predicate type Predicate = (string | number)[], array of string keys or number indexes\n   * @returns this\n   */\n  public delete(predicate: Predicate): MasterObject<SourceType, ArrayItemsType> {\n    if (this.isPredicate(predicate)) {\n      return this.deletePredicate(predicate)\n    }\n\n    return this\n  }\n\n  /**\n   * Checks the existence of a value based on the passed predicate.\n   * @param predicate type Predicate = (string | number)[], array of string keys or number indexes\n   * @returns boolean\n   */\n  public exist(predicate: Predicate): boolean {\n    if (this.isPredicate(predicate)) {\n      return this.existPredicate(predicate)\n    }\n\n    return false\n  }\n\n  /**\n   * Shows the contents of the object in the console\n   * @returns this\n   */\n  public log(): MasterObject<SourceType, ArrayItemsType> {\n    console.log(this.object)\n    return this\n  }\n\n  private getPredicate<ValueType>(predicate: Predicate): ValueType | undefined {\n    if (!this.isPredicateFilled(predicate)) {\n      return undefined\n    }\n\n    let nested: any = this.object\n\n    for (let i = 0; i < predicate.length; i++) {\n      if (\n        (this.isObject(nested[predicate[i]]) || Array.isArray(nested[predicate[i]])) &&\n        predicate[i] in nested &&\n        i !== predicate.length - 1\n      ) {\n        nested = nested[predicate[i]]\n      } else {\n        if (i === predicate.length - 1) {\n          return nested[predicate[i]] as ValueType\n        } else {\n          return undefined\n        }\n      }\n    }\n  }\n\n  private setPredicate<T>(predicate: Predicate, value: T): MasterObject<SourceType, ArrayItemsType> {\n    if (!this.isPredicateFilled(predicate)) {\n      return this\n    }\n\n    let nested: any = this.object\n\n    for (let i = 0; i < predicate.length; i++) {\n      if (!(this.isObject(nested[predicate[i]]) || Array.isArray(nested[predicate[i]])) && i !== predicate.length - 1) {\n        if (this.isNumber(predicate[i + 1])) {\n          nested[predicate[i]] = []\n        } else {\n          nested[predicate[i]] = {}\n        }\n      }\n\n      if (i === predicate.length - 1) {\n        nested[predicate[i]] = cloneDeep(value)\n      } else {\n        nested = nested[predicate[i]]\n      }\n    }\n\n    return this\n  }\n\n  private deletePredicate(predicate: Predicate): MasterObject<SourceType, ArrayItemsType> {\n    if (!this.isPredicateFilled(predicate)) {\n      return this\n    }\n\n    let nested: any = this.object\n\n    for (let i = 0; i < predicate.length; i++) {\n      if (\n        (this.isObject(nested[predicate[i]]) || Array.isArray(nested[predicate[i]])) &&\n        predicate[i] in nested &&\n        i !== predicate.length - 1\n      ) {\n        nested = nested[predicate[i]]\n      } else {\n        if (i === predicate.length - 1) {\n          delete nested[predicate[i]]\n        }\n\n        break\n      }\n    }\n\n    return this\n  }\n\n  private existPredicate(predicate: Predicate): boolean {\n    if (this.isPredicateFilled(predicate) && this.getPredicate(predicate) !== this.object) {\n      if (predicate.length > 1) {\n        const predicateParent = this.getPredicate(predicate.slice(0, -1))\n\n        if (\n          (this.isObject(predicateParent) || Array.isArray(predicateParent)) &&\n          predicate[predicate.length - 1] in predicateParent\n        ) {\n          return true\n        }\n      } else {\n        if (predicate[0] in this.object) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  private isString(value: unknown): value is string {\n    return typeof value === 'string' && value !== ''\n  }\n\n  private isNumber(value: unknown): value is number {\n    return typeof value === 'number' && !isNaN(+value)\n  }\n\n  private isObject(value: unknown): value is Object {\n    return typeof value === 'object' && value !== null && !Array.isArray(value)\n  }\n\n  private isDate(value: unknown): value is Date {\n    return value instanceof Date\n  }\n\n  private isPredicate(value: unknown): value is Predicate {\n    return Array.isArray(value) && value.every(item => this.isString(item) || this.isNumber(item))\n  }\n\n  private isPredicateFilled(predicate: Predicate): boolean {\n    return predicate.length > 0\n  }\n}\n"],"mappings":"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","names":[]}